<?php
if(!function_exists('in_array_r')) {
	function in_array_r($needle, $haystack, $strict = false) {
		foreach ($haystack as $item) {
			if (($strict ? $item === $needle : $item == $needle) || (is_array($item) && in_array_r($needle, $item, $strict))) {
				return true;
			}
		}
		return false;
	}
}

function unread_tickets($user){
	$tickets_query = "SELECT DISTINCT node.nid AS nid, users_node.uid AS uid, GREATEST(node.changed, node_comment_statistics.last_comment_timestamp) AS changed
		FROM node node
		LEFT JOIN comment comment_node ON node.nid = comment_node.nid
		LEFT JOIN users users_node ON node.uid = users_node.uid
		LEFT JOIN users users_comment ON comment_node.uid = users_comment.uid
		LEFT JOIN support_ticket support_ticket ON node.nid = support_ticket.nid
		LEFT JOIN users users_support_ticket ON support_ticket.assigned = users_support_ticket.uid
		LEFT JOIN support_states support_states ON support_ticket.state = support_states.sid
		INNER JOIN node_comment_statistics node_comment_statistics ON node.nid = node_comment_statistics.nid
		LEFT OUTER JOIN support_ticket st ON st.nid = node.nid
		WHERE ((( (users_node.uid = :uid) )OR( (users_comment.uid = :uid) )OR( (users_support_ticket.uid = :uid) ))AND( (node.status = '1') AND (node.type IN  ('support_ticket')) AND (support_states.state IN  ('new', 'active', 'pending')) ))AND( (st.client IN  ('1')) OR (st.client IS NULL ) )
		ORDER BY changed DESC";

 	$history_query=	"SELECT DISTINCT node.nid AS nid, history.timestamp AS history_timestamp, node.changed AS node_changed	FROM node node LEFT JOIN history history ON node.nid = history.nid AND history.uid = :uid	WHERE node.nid = :nid";
	
	$nodecounter = 'SELECT max(viewc.timestamp) AS viewc_timestamp, node.changed AS node_changed   
		FROM node node 
		LEFT JOIN nodeviewcount viewc ON node.nid = viewc.nid
		WHERE node.nid = :nid AND viewc.uid = :uid';

	$output = array();
	$i = 0;
	$tickets = db_query($tickets_query , array(':uid' => $user->uid));
	foreach($tickets as $ticket){
		$history = db_query($history_query , array(':uid' => $user->uid , ':nid' => $ticket->nid));//->execute()->fetchAll();

		foreach($history as $row){
			if(!isset($row->history_timestamp) || $row->history_timestamp < $ticket->changed){
				$result = db_query($nodecounter , array(':uid' => $user->uid , ':nid' => $ticket->nid))->fetchObject();
				if(!isset($result->viewc_timestamp) || $result->viewc_timestamp < $result->node_changed){
					$output[$i]['nid'] = $ticket->nid;
					$output[$i]['from'] = $ticket->uid;
					$i++;
				}
			}
		}
	}

	if(count($output)){
		return $output;
	}else{
		return null;
	}
}

function unread_tickets_count($user){
	return count(unread_tickets($user));
}

function student_films($uid , $detail = false){
	$user_q = "SELECT instrument.field_instrument_value AS instrument , _level.field_levelnumber_value AS level, _session.field_sessionnumber_value AS session
    FROM field_data_field_siteinfo_stu field_stu
    INNER JOIN field_data_field_instrument instrument
    INNER JOIN field_data_field_levelnumber _level
    INNER JOIN field_data_field_sessionnumber _session
    ON field_stu.field_siteinfo_stu_value = instrument.entity_id
    AND field_stu.field_siteinfo_stu_value = _level.entity_id
    AND field_stu.field_siteinfo_stu_value = _session.entity_id
    WHERE field_stu.entity_type = 'user' AND field_stu.entity_id = :uid 
	AND instrument.entity_type = 'field_collection_item' 
	AND _level.entity_type = 'field_collection_item' 
	AND _session.entity_type = 'field_collection_item'";
	
	$nid_q = "SELECT field_stu.entity_id AS nid
    FROM field_data_field_siteinfo_stu field_stu
    INNER JOIN field_data_field_instrument instrument
    INNER JOIN field_data_field_levelnumber _level
    INNER JOIN field_data_field_sessionnumber _session
    ON field_stu.field_siteinfo_stu_value = instrument.entity_id
    AND field_stu.field_siteinfo_stu_value = _level.entity_id
    AND field_stu.field_siteinfo_stu_value = _session.entity_id
    WHERE field_stu.entity_type = 'node' 
	AND instrument.field_instrument_value = :instrument 
	AND _level.field_levelnumber_value = :level 
	AND _session.field_sessionnumber_value = :session";
	
	$output = array();
	$rows = db_query($user_q , array(':uid' => $uid))->fetchAll();
	if($detail){
		foreach($rows as $row){
			$result = db_query($nid_q , array(':instrument' => $row->instrument , ':level' => $row->level , ':session' => $row->session))->fetchAll();
			foreach($result as $nid){
				$output[$row->instrument][$row->level][] = $nid->nid; 
			}
		}
	}else{
		foreach($rows as $row){
			$result = db_query($nid_q , array(':instrument' => $row->instrument , ':level' => $row->level , ':session' => $row->session))->fetchAll();
			foreach($result as $nid){
				$output[] = $nid->nid; 
			}
		}
	}

	return count($output)? $output : null;
}

function timetoexpire($uid){
	$q = db_select('uc_roles_expirations', 'r');
	$rows = $q->fields('r', array())->condition('r.uid', $uid)->execute()->fetchAll();
	$timetoexpire = 0;
	$timetoexpire_vip = 0;
	foreach ($rows as $r) {
		if($r->rid == 4){ //honarjo role id
			$timetoexpire = $r->expiration - time() ;
			$timetoexpire = $timetoexpire / (24*60*60) ;
		}else if($r->rid == 6){//vip role id
			$timetoexpire_vip = $r->expiration - time() ;
			$timetoexpire_vip = $timetoexpire_vip / (24*60*60) ;
		}
	}
	return array('honarjo'=> $timetoexpire , 'vip'=> $timetoexpire_vip);
}

function mdump($var , $die = false){
	global $user;
	if($user->uid == 1 || $user->uid == 86){
		echo '<pre>';
		print_r($var);
		echo '</pre>';
		if($die){
			die($die);
		}
	}
}

/**
 * Implements hook_menu().
 */
function functions_menu() {
  $items['admin/update-file-access'] = array(
    'title' => 'File access',
    'description' => 'File access settings.',
    'page callback' => 'update_file_access',
    'access arguments' => array('administer file access'),
	'type' => MENU_LOCAL_TASK,
  );
  $items['admin/4fasl-setting'] = array(
    'title' => 'تنظیمات دوره ها',
    'description' => 'در اینجا میتوانید قسمت های مختلف سایت و دوره ها را به یکدیگر متصل کرد و نیازی به تغییر در کد نباشد.',
    'page callback' => 'site_setting',
    //'page arguments' => array('site_setting'),
    'access arguments' => array('administer modules'),
    'file' => 'functions.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/4fasl-setting/add'] = array(
    'title' => 'افزودن تنظیمات دوره ها',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('add_site_setting'),
    'access arguments' => array('administer modules'),
    'file' => 'functions.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/4fasl-setting/%/edit'] = array(
    'title' => 'ویرایش تنظیمات دوره ها',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edit_site_setting', 2),
    'access arguments' => array('administer modules'),
    'file' => 'functions.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/4fasl-setting/get'] = array(
    'page callback' => 'get_site_setting',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/4fasl-setting/get/%'] = array(
    'page callback' => 'get_site_setting',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['time-selection/%'] = array(
    'page callback' => 'time_selection',
    'type' => MENU_CALLBACK,
	'page arguments' => array(1),
    'access arguments' => array('access content'),
	//'delivery callback' => 'custom_ajax_callback',
  );
  $items['admin/people/relationships/%user_relationships/edit'] = array(
    'title' => 'ویرایش روابط کاربران',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edit_relationship', 3),
    'access arguments' => array('administer modules'),
    'file' => 'functions.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/people/relationships/add'] = array(
    'title' => 'افزودن روابط کاربران',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('add_relationship'),
    'access arguments' => array('administer modules'),
    'file' => 'functions.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function functions_theme() {
  return array(
    'functions_user_expiration' => array(
      'render element' => 'form',
      'file' => 'functions.theme.inc',
    ),
  );
}

function update_file_access(){
  define('FILE_ACCESS_USER', 1);
  $fails = $success = array();
	$values = db_query("SELECT main.entity_id AS uid , ins.field_instrument_value AS instrument, levn.field_levelnumber_value AS level, sn.field_sessionnumber_value AS session
        FROM field_data_field_siteinfo_stu main
        INNER JOIN field_data_field_instrument ins ON main.field_siteinfo_stu_value = ins.entity_id
        INNER JOIN field_data_field_levelnumber levn ON main.field_siteinfo_stu_value = levn.entity_id
        INNER JOIN field_data_field_sessionnumber sn ON main.field_siteinfo_stu_value = sn.entity_id
        WHERE main.entity_type = 'user' ORDER BY `uid` DESC");
		
	foreach($values as $row){
		$uid = $row->uid;
		$instrument = $row->instrument;
		$level = $row->level;
		$session = $row->session;
		
		
		
		//for giving user file access 
		$sql = "
			SELECT main.entity_id as nid 
			FROM field_data_field_siteinfo_stu main
			INNER JOIN field_data_field_instrument ins ON main.field_siteinfo_stu_value = ins.entity_id
			INNER JOIN field_data_field_levelnumber levn ON main.field_siteinfo_stu_value = levn.entity_id
			INNER JOIN field_data_field_sessionnumber sn ON main.field_siteinfo_stu_value = sn.entity_id
			WHERE main.entity_type = 'node' 
			AND ins.field_instrument_value = :instrument
			AND levn.field_levelnumber_value = :level
			AND sn.field_sessionnumber_value = :session" ;
		$result = db_query($sql, array(
			':instrument' =>$instrument,
			':level' =>$level,
			':session' =>$session
		));
		
		if($rows = $result->fetchAll()){
			foreach($rows as $row){
				$node = node_load($row->nid);
				if(isset($node->field_course_film['und'][0])){
					if(file_access_set_file_access($node->field_course_film['und'][0]['fid'] , $uid , NULL , FILE_ACCESS_USER)){
						$success[] = 'uid: '. $uid . ' | nid: '. $node->nid . ' | fid: '. $node->field_course_film['und'][0]['fid'] . '<br>';
					}else{
						$fails[] = 'uid: '. $uid . ' | nid: '. $node->nid . ' | fid: '. $node->field_course_film['und'][0]['fid'] . '<br>';
					}
				}
			}
		}
	}
	
	//adding accesses to files based on node_refrence field
	$results = db_query("SELECT entity_id as uid, field_node_refrence_nid as nid FROM field_data_field_node_refrence");	
	foreach($results as $result){
		$uid = $result->uid;
		$node = node_load($result->nid);

		if(isset($node->field_course_film['und'][0])){
			if(file_access_set_file_access($node->field_course_film['und'][0]['fid'] , $uid , NULL , FILE_ACCESS_USER)){
				$success[] = 'uid: '. $uid . ' | nid: '. $node->nid . ' | fid: '. $node->field_course_film['und'][0]['fid'] . '<br>';
			}else{
				$fails[] = 'uid: '. $uid . ' | nid: '. $node->nid . ' | fid: '. $node->field_course_film['und'][0]['fid'] . '<br>';
			}
		}
	}	
	
	$resault = array('success' => $success, 'fail' => $fails);
	mdump($resault ,true);
}

/**
 * Implements hook_form_user_profile_form_alter().
 */
function functions_form_user_profile_form_alter(&$form, &$form_state) {
  $account = $form_state['build_info']['args'][0];
  if (isset($form_state['build_info']['args'][1])) {
    $category = $form_state['build_info']['args'][1];
  }
  else {
    // user_profile_form() has a default value for $category.
    $category = 'account';
  }
  if (!user_access('administer users') || $category != 'account') {
    return;
  }
  
  $form['uc_roles']['expirations']['#theme'] = 'functions_user_expiration';
  
  // Create the expirations table.
  $expirations = db_query("SELECT * FROM {uc_roles_expirations} WHERE uid = :uid", array(':uid' => $account->uid));
  foreach ($expirations as $expiration) {
    $form['uc_roles']['expirations']['table'][$expiration->rid]['cancel'] = array(
		// '#title' => 'حذف '. _uc_roles_get_name($expiration->rid),
        '#type' => 'checkbox',
    );
  }

  $form['#validate'][] = 'functions_user_validate';
  return $form;
}

function functions_user_validate($form, &$form_state){
	
}

/**
 * Implements hook_user_presave().
 */
function functions_user_presave(&$edit, $account, $category) {
  if (!user_access('administer users') || $category != 'account') {
    return;
  }

  // Grant a new role if a new temporary role is added.
  if (isset($edit['new_role']) && $edit['new_role'] && $category == 'account') {
	if($edit['new_role_add'] == 4){//honarjo role id
		$type = 1; //شاگرد relationship id
		//update the user 'field_collection' data
		$expires = timetoexpire($account->uid);
		if($expires['honarjo'] == 0){
			add_collection($account , $account->field_favorite['und'][0]['value'] , 'l1' , '1');
		}
	}elseif($edit['new_role_add'] == 6){//vip role id
		$type = 3; //vip relationship id
	}

	if(($relationship = user_relationships_request_relationship($account->uid, which_teacher_name($account->field_favorite['und'][0]['value']) , $type , true)) !== FALSE){
		//message has been set in the function itself
	} else{
		drupal_set_message(t('there is a problem. please contact to support for detail.<br>code : @id , value : @val', array('@id'=> 5 , '@val' => '' ,)), 'error');
	}
  }

  // Check if any temporary role actions were taken.
  if (isset($edit['table'])) {
    foreach ((array)$edit['table'] as $rid => $value) {
      // Remove this expiration and role.
      if ($value['cancel']) {
		if($rid == 4){//honarjo role id
			$rtid = 1; //شاگرد relationship id
		}elseif($rid == 6){//vip role id
			$rtid = 3; //vip relationship id
		}
		db_delete('user_relationships')
			->condition('requester_id', $account->uid)
			->condition('rtid', $rtid)
			->execute();

        uc_roles_delete($account, $rid);
      }
    }
  }

}

/**
 * Implementation of hook_node_access().
 */
function functions_node_access($node, $op, $account){
  global $user;
  $type = is_string($node) ? $node : $node->type;
  if ($type != 'homework' || user_has_role(3 , $user)) {
    // We are only interested in support_ticket nodes.
    return NODE_ACCESS_IGNORE;
  }
  switch ($op) {
    case 'view':
	  if($user->uid == $node->uid){
        //anyone can see their practices
		$access = NODE_ACCESS_IGNORE;
	  }
	  //teacher role ID
      else if (user_has_role(5 , $user)) {
		$relation = db_select('user_relationships', 'ur')
		->fields('ur', array())
		->condition('requestee_id', $user->uid,'=')
		->condition('requester_id', $node->uid,'=')
		->condition('rtid', array(1,3),'IN') //honarjoo and vip relationship type id
		->execute()->fetchObject();
		
		if(isset($relation->rid)){ //the teacher is seeing his student
			$access = NODE_ACCESS_IGNORE;
		}
      }
      else {
        $access = NODE_ACCESS_DENY;
      }
      return $access;
  }  
}


function instrument_info($condition = '', $value = '', $fileds = array(), $type = 'both'){
	$q = db_select('site_settings', 's')->fields('s', $fileds);
	if($condition != '') $q = $q->condition($condition, $value, '=');
	$q = ($type == 'both')? $q : $q->condition('type', array($type, 'both'), 'IN');	
	$q = $q->orderBy('type', 'ASC');
	$q = $q->execute()->fetchObject();
	
	if (is_object($q)){ 
		if(isset($fileds[0]) && !isset($fileds[1])){
			return $q->$fileds[0];
		}else {
			return $q;
		}
	}
}

/*
 * example: 
 	$new_array = array_map(function ($v) {
		return parse($v, "...", 3);
	}, $orginal_array);
 */
function parse($v, $r, $max_d = 1, $d = 0) {
  if (is_array($v) || is_object($v)) {
    if ($d >= $max_d) {
      return $r;
    } else {
      $d++;
      return array_map(function ($v) use ($max_d, $r,  $d) {
        return parse($v, $r, $max_d, $d);
      }, $v);   
    }
  } else {
    return $v;
  }
}
	
function time_selection($ostad_uid){ 
	$query = "SELECT 
					f.delta as delta,
					days.field_days_value as days, 
					times.field_time_value as times, 
					en.field_enable_value as enabled, 
					stu.field_user_uid as stu
					
					FROM `field_data_field_classes_timing` f
					
					LEFT JOIN field_data_field_enable en ON en.entity_id = f.field_classes_timing_value and en.bundle = 'field_classes_timing'
					LEFT JOIN field_data_field_time times  ON times.entity_id = f.field_classes_timing_value and times.bundle = 'field_classes_timing'
					LEFT JOIN field_data_field_days days ON days.entity_id = f.field_classes_timing_value and days.bundle = 'field_classes_timing'
					LEFT JOIN field_data_field_user stu ON stu.entity_id = f.field_classes_timing_value and stu.bundle = 'field_classes_timing'
					
					WHERE f.entity_type = 'user' and f.entity_id = :uid
					ORDER BY delta";
	$result = db_query($query, array(':uid' => $ostad_uid))->fetchAll();

		$timing = array();
		foreach($result as $row){
			$timing[$row->days][] = $row;
		}
		$output = '
		<form id="time-selection" method="post" action="/enrollment/time-selection" accept-charset="UTF-8">
		<table class="classes-timing">
			<tbody>
		';
		foreach($timing as $day_key => $day){
			$output .= '<tr>';
			$output .= '<td class="day-name">'. translate_days($day_key) .'</td>';
			$odd = true;
			foreach($day as $time){
				$output .= ($odd)? '<td>' : '';
				$output .= '<label class="'. (is_null($time->stu)? 'empty ' : 'busy ') . (($time->enabled == 1)? 'enabled ' : 'disabled ') .'">'; 
				//$output .= '<input type="radio" name="time_select" value="select_'. $day_key .'_'. $time->times .'" '. (!is_null($time->stu) || ($time->enabled == 0)? 'disabled' : '') .' required>';
				$output .= translate_hours($time->times);
				$output .= '</label>';
				$output .= ($odd)? '':'</td>' ;
	
				$odd = ($odd)? false : true;
			}
			$output .= '</tr>';
		}
		$output .= '
			</tbody>
		</table>';
		// if($bought > 0){
			// $output .= '<input id="ostad-id" type="hidden" name="ostad_uid" value="'. $ostad_uid .'">
				// <button type="submit" name="submit" value="Submit" class="btn btn-success">تایید و ارسال</button>';
		// }
		$output .= '</form>';
		
	if($ostad_uid == 7262){
		$output = '<p class="hozouri">این کلاس به صورت گروهی برگزار می شود. برای شرکت در این کلاس با دفتر آموزشگاه با شماره های 44044497 - 44043963 تماس بگیرید.</p>' ;
	}

	$data = array('timing' => $output);

	drupal_json_output($data);
	drupal_exit();
	return $data;
}

function translate_days($value){
	switch($value){
		case 0:
			return 'شنبه';
			break;
		case 1:
			return 'یکشنبه';
			break;
		case 2:
			return 'دوشنبه';
			break;
		case 3:
			return 'سه شنبه';
			break;
		case 4:
			return 'چهارشنبه';
			break;
		case 5:
			return 'پنجشنبه';
			break;
		case 6:
			return 'جمعه';
			break;
		default:
			return false;
	}
}

function translate_hours($value){
	switch($value){
		case '1000':
			return '10';
			break;
		case '1030':
			return '10:30';
			break;
		case '1100':
			return '11';
			break;
		case '1130':
			return '11:30';
			break;
		case '1200':
			return '12';
			break;
		case '1230':
			return '12:30';
			break;
		case '1300':
			return '13';
			break;
		case '1330':
			return '13:30';
			break;
		case '1400':
			return '14';
			break;
		case '1430':
			return '14:30';
			break;
		case '1500':
			return '15';
			break;
		case '1530':
			return '15:30';
			break;
		case '1600':
			return '16';
			break;
		case '1630':
			return '16:30';
			break;
		case '1700':
			return '17';
			break;
		case '1730':
			return '17:30';
			break;
		case '1800':
			return '18';
			break;
		case '1830':
			return '18:30';
			break;
		case '1900':
			return '19';
			break;
		case '1930':
			return '19:30';
			break;
		case '2000':
			return '20';
			break;
		case '2030':
			return '20:30';
			break;
		default:
			return '';
	}
}

function test_input($data) {
  $data = trim($data);
  $data = stripslashes($data);
  $data = htmlspecialchars($data);
  return $data;
}

function custom_ajax_callback($page_callback_result) {
   // Only render content and validates return
  $content = is_string($page_callback_result) ? $page_callback_result :   drupal_render($page_callback_result);
  $html = '' . drupal_get_css() . drupal_get_js() . '' . $content . '';
  print $html;
  drupal_page_footer(); 
}

function translate_teachers_att_id($att_id){
	return instrument_info('Teacher_OptionId',$att_id,array('ostad_uid'));
	switch($att_id){
		case 30: //'تار'
			return 164;
			break;
		case 29://'تنبک'
			return 108;
			break;
		case 32://'سنتور'
			// return 106; //پوربخت
			return 1996; //کیان
			break;
		case 31://'سه تار'
			return 111;
			break;
		case 28://'ویولن'
			return 107;
			break;
		case 33://'پیانو'
			return 30;
			break;
		case 38://'گیتار کلاسیک'	
			return 64;
			break;
		case 35://'گیتار فلامنکو'
			return 109;
			break;
		case 36:// 'گیتار پاپ'
			return 110;
			break;
		case 42:// 'آواز پاپ'
			return 7260;
			break;
		case 34:// 'نی'
			return 2785;
			break;
		case 37://گیتار الکتریک
			return 3079;
			break;
		case 27: //'هارمونیکا':
			return 3314;
			break;
		case 39://مسیح کریمی
			return 7259;
			break;
		case 40://سرور رضازاده
			return 7261;
			break;
		case 41://پوریا عطاکویی
			return 7262;
			break;
		case 43://'تئوری موسیقی':
			return 7263;
			break;
		case 49://صادق شیخ زاده:
			return 7313;
			break;

		default:
			return false;
	}
}

function get_site_setting($type = 'both', $fileds = array()){
	$q = db_select('site_settings', 's')->fields('s', $fileds);
	$q = ($type == 'both')? $q : $q->condition('type', array($type, 'both'), 'IN');
	$result = $q->execute()->fetchAll();
	
	$data = array('timing' => $result);

	drupal_json_output($result);
	drupal_exit();
	return $result;
}
